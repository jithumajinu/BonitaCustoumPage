{"designerVersion":"1.4.26","id":"customEditionContainer","name":"EditionContainer","lastUpdate":1502775782415,"template":"<!-- The custom widget template is defined here\r\n   - You can use standard HTML tags and AngularJS built-in directives, scope and interpolation system\r\n   - Custom widget properties defined on the right can be used as variables in a templates with properties.newProperty\r\n   - Functions exposed in the controller can be used with ctrl.newFunction()\r\n   - You can use the 'environment' property injected in the scope when inside the Editor whiteboard. It allows to define a mockup\r\n     of the Custom Widget to be displayed in the whiteboard only. By default the widget is represented by an auto-generated icon\r\n     and its name (See the <span> below).\r\n   -->\r\n\r\n<div ng-class=\"{ 'form-horizontal':  !properties.labelHidden && properties.labelPosition === 'left' }\">\r\n    <label ng-if=\"!properties.labelHidden\" class=\"row\"  \r\n    ng-style=\"getFormStatus()?{ 'color':properties.beforeEditColor }:{'color': properties.afterEditColor }\" > {{properties.label | uiTranslate}} </label>\r\n   <div ></div>\r\n\r\n    <div ng-if=\"!properties.inline\">\r\n        <div class=\"row\" ng-repeat=\"(key, editionRowValue) in filterFn().editionRow track by $index\">\r\n            <div ng-repeat=\"(key, choice) in editionRowValue.rowControlOption track by $index\" ng-show=\"ctrl.getShowStatus(choice)\" ng-switch on=\"ctrl.removeSpace(choice.type)\"> \r\n                 <div class=\"form-group col-xs-12\" ng-show=\"marktoggleShow[choice.persistenceId]\" \r\n                   ng-style=\"getType(choice)?markStyle:optionStyle\">\r\n                     \r\n                    <div ng-class=\"getType(choice) ? 'col-xs-10' : 'col-xs-5 col-md-3'\" style=\"float:left;text-align:left;\">\r\n                        <label>\r\n                     <div ng-if=\"getType(choice)\" ng-click=\"toggleGroup(choice)\" >\r\n                      <i ng-if=\"checkMark(choice)\" ng-class=\"isGroupShown(choice) ? 'glyphicon glyphicon-plus' : 'glyphicon glyphicon-minus'\"></i>\r\n                      {{ choice.name }}\r\n                      <label style=\"{{properties.labelCSS}}\" ng-show=\"choice.show\" ng-disabled=\"choice.readOnly\" >\r\n                            {{ ctrl.getLabel(choice) | uiTranslate }}  \r\n                       </label>\r\n                    </div>                         \r\n                    <div ng-if=\"!getType(choice)\" \r\n                    ng-style=\"ctrl.isDirtyRow(choice)?{ 'color':properties.afterEditColor }:{'color': properties.beforeEditColor }\"\r\n                    >\r\n                    {{ choice.name }}  \r\n                    </div>\r\n                    </label>    \r\n                </div>\r\n\t\t\t\t\r\n                <!--   ng-show=\"$index===0\"  -->\r\n               \r\n                 \r\n                <div ng-if=\"!getType(choice)\" class=\"col-xs-7\">\r\n                    <!-- ng-switch start   -->\r\n                    \r\n                    \r\n                    \r\n                    <div ng-switch-when=\"checkbox\" class=\"form-group\">\r\n                        <label style=\"padding-left:0px ; {{properties.styleCSS}}\" ng-show=\"choice.show\">\r\n                        <input\r\n                           type=\"checkbox\"\r\n                           ng-disabled=\"choice.readOnly || properties.disabled\"\r\n                           ng-show=\"choice.show\"\r\n                           ng-required=\"properties.required\"\r\n                           \r\n                           ng-model=\"choice.optionValue\"\r\n                           ng-checked=\"ctrl.getModel(choice)\"\r\n                           ng-click=\"ctrl.isDirtyRow(choice)\"\r\n                           style=\"{{properties.styleCSS}}\"\r\n                           \r\n                           >  \r\n                            <!--   ng-click=\"ctrl.hideAndShow(choice)\" -->\r\n                        {{ ctrl.getLabel(choice)  | uiTranslate }} \r\n                        </label>\r\n                    </div>\r\n                    <!-- checkbox close   -->\r\n                    <!--  <div ng-switch-when=\"label\">\r\n                         \r\n                        <label style=\"{{properties.labelCSS}}\"  \r\n                           ng-show=\"choice.show\"\r\n                           ng-disabled=\"choice.readOnly\"\r\n                           >\r\n                        {{ ctrl.getLabel(choice) | uiTranslate }}\r\n                         \r\n                        <i ng-class=\"isGroupShown(choice) ? 'glyphicon glyphicon-minus' : 'glyphicon glyphicon-plus'\" ng-click=\"toggleGroup(choice)\"></i>\r\n                        \r\n                        </label> \r\n                     </div>\r\n                       label close -->\r\n                    <div ng-switch-when=\"text\" class=\"form-group\">\r\n                        <input type=\"text\" ng-disabled=\"choice.readOnly || properties.disabled\" ng-show=\"choice.show\" ng-required=\"properties.required\"  ng-model=\"choice.optionValue\"  style=\"{{properties.styleCSS}}\" > <!--ng-keydpress=\"ctrl.checkEditStatus(choice)\" -->\r\n                        <label style=\"{{properties.styleCSS}}\" ng-show=\"choice.show\" >\r\n                        {{ ctrl.getLabel(choice) | uiTranslate }}\r\n                        </label>\r\n                    </div>\r\n                    <div ng-switch-when=\"textarea\" class=\"form-group\">\r\n                        <!-- textarea　start  -->\r\n                        <textarea rows=\"{{properties.textareaRows}}\" cols=\"{{properties.textareaCols}}\" ng-model=\"$parent.choice.optionValue\" ng-disabled=\"choice.readOnly || properties.disabled\" ng-show=\"choice.show\" ng-required=\"properties.required\"  style=\"{{properties.styleCSS}}\" ng-blur=\"ctrl.checkEditStatus(choice)\" ng-keydpress=\"ctrl.checkEditStatus(choice)\">\r\n                            \r\n                        </textarea>\r\n                        <br>\r\n                        <label style=\"{{properties.styleCSS}}\" ng-show=\"choice.show\">\r\n                        {{ ctrl.getLabel(choice) | uiTranslate }}\r\n                        </label>\r\n                    </div>\r\n                    <!-- textarea close -->\r\n                    <div ng-switch-default class=\"form-group\">\r\n                         <label>\r\n                          {{   (choice.type)?choice.type:\"Type is not Defined\"}}\r\n                        </label>\r\n                    </div>\r\n                    <!-- ng-switch close  -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n</div>\r\n","controller":"/**\r\n * The controller is a JavaScript function that augments the AngularJS scope and exposes functions that can be used in the custom widget template\r\n * \r\n * Custom widget properties defined on the right can be used as variables in a controller with $scope.properties\r\n * To use AngularJS standard services, you must declare them in the main function arguments.\r\n * \r\n * You can leave the controller empty if you do not need it.\r\n */\r\nfunction($scope, $parse, widgetNameFactory, $log, $filter) {\r\n\r\n    'use strict';\r\n    var ctrl = this;\r\n    $scope.lbType = \"label\";\r\n    $scope.selectedEdition = {};\r\n    $scope.editionData = {};\r\n    $scope.initStatus = true;\r\n    $scope.marktoggleArray = [];\r\n    $scope.marktoggleShow = [];\r\n    $scope.initMarkStatus = false;\r\n   \r\n\r\n$scope.modelValueChanged = function (event , choice) {\r\n            if(choice.optionValue != choice.oldValue){\r\n               choice.editedStatus = true;\r\n            }else{\r\n               choice.editedStatus = false;    \r\n            }\r\n};\r\n\r\n\r\n    /* \r\n     *method:isGroupShown\r\n     *param :group\r\n     */\r\n    $scope.isGroupShown = function(group) {\r\n        return $scope.marktoggleArray[group.persistenceId] !== $scope.initMarkStatus;\r\n    };\r\n\r\n    /* \r\n     *method:toggleGroup\r\n     *param :group\r\n     */\r\n    $scope.toggleGroup = function(group) {\r\n        if (group.type === \"mark\") {\r\n            $scope.marktoggleArray[group.persistenceId] = !$scope.marktoggleArray[group.persistenceId];\r\n            $scope.toggleHideAndShow(group);\r\n        }\r\n    };\r\n\r\n    /* \r\n     *method:toggleHideAndShow\r\n     *param :group\r\n     */\r\n    $scope.toggleHideAndShow = function(group) {\r\n        angular.forEach($scope.editionData.editionRow, function(item) {\r\n            angular.forEach(item.rowControlOption, function(rowData) {\r\n                //if (rowData.optionClass === group.optionClass && !$scope.checkMark(rowData) && rowData.readOnly) {\r\n                if (rowData.optionClass === group.optionClass && !$scope.checkMark(rowData)) {\r\n                    $scope.marktoggleShow[rowData.persistenceId] = ($scope.isGroupShown(group)) ? false : true;\r\n                }\r\n            });\r\n        });\r\n    };\r\n\r\n    /* \r\n     *method:getType\r\n     *param :choice\r\n     */\r\n    $scope.getType = function(choice) {\r\n        return (ctrl.removeSpace(choice.type) === \"label\" || ctrl.removeSpace(choice.type) === \"mark\") ? true : false;\r\n    };\r\n    \r\n    \r\n    \r\n    $scope.getColor = function(choice) {\r\n        var clr = \"#fcc9b9;\";\r\n        return (ctrl.removeSpace(choice.type) === \"label\" || ctrl.removeSpace(choice.type) === \"mark\") ? $scope.properties.color : $scope.properties.separatorLineStype;\r\n    };\r\n\r\n    /* clr\r\n     *method:checkMark\r\n     *param :choice\r\n     */\r\n    $scope.checkMark = function(choice) {\r\n        return (ctrl.removeSpace(choice.type) === \"mark\") ? true : false;\r\n    };\r\n\r\n    /* \r\n     *method:filterFn\r\n     *param : \r\n     */\r\n    $scope.filterFn = function() {\r\n        if ($scope.properties.value) {\r\n            $scope.editionData = $filter('filter')($scope.properties.value, {\r\n                selected: \"true\"\r\n            })[0];\r\n            return $scope.editionData;\r\n        }\r\n    };\r\n\r\n    /* \r\n     *method:getFormStatus\r\n     *param : \r\n     */\r\n    $scope.getFormStatus = function() {\r\n               var editionDirty = true ;\r\n               angular.forEach($scope.properties.value, function(valueEdition, keyEdition) {\r\n                    angular.forEach(valueEdition.editionRow, function(valueEditionRow, keyEditionRow) {\r\n                        angular.forEach(valueEditionRow.rowControlOption, function(valuerowControlOption, keyrowControlOption) {\r\n                             if(valuerowControlOption.optionValue != valuerowControlOption.oldValue && ctrl.removeSpace(valuerowControlOption.type) != \"label\" && ctrl.removeSpace(valuerowControlOption.type) != \"mark\" ){\r\n                                 editionDirty = false;\r\n                            }\r\n                        });\r\n                    });\r\n                });\r\n                $scope.properties.hasChangedEditionStatus = editionDirty;\r\n                \r\n       return  editionDirty;               \r\n    };\r\n\r\n\r\n    /* \r\n     *method:getModel\r\n     *param :choice \r\n     */\r\n    this.getModel = function(choice) {\r\n        if (angular.isString(choice.optionValue)) {\r\n            choice.optionValue = this.removeSpace(choice.optionValue); //choice.optionValue.replace(/ /g,\"\");\r\n            choice.optionValue = (choice.optionValue === \"true\") ? true : false;\r\n        }\r\n        if (angular.isString(choice.oldValue)) {\r\n            choice.oldValue = this.removeSpace(choice.oldValue); //choice.optionValue.replace(/ /g,\"\");\r\n            choice.oldValue = (choice.oldValue === \"true\") ? true : false;\r\n        }\r\n        return choice.optionValue;\r\n    };\r\n\r\n    /* \r\n     *method:hideAndShow\r\n     *param :choice \r\n     */\r\n    this.isDirtyRow = function(choice) {\r\n        var bol = false ;\r\n            if(choice.optionValue != choice.oldValue){\r\n               choice.editedStatus = true;\r\n               bol = true;  \r\n            }else{\r\n               choice.editedStatus = false;    \r\n               bol = false;  \r\n            }\r\n             return bol;\r\n    };\r\n\r\n    /* \r\n     *method:getShowStatus\r\n     *param :choice \r\n     */\r\n    this.getShowStatus = function(choice) {\r\n        var bol = choice.show;\r\n        if (choice.relation) {\r\n            angular.forEach($scope.editionData.editionRow, function(valueEditionRow, keyEditionRow) {\r\n                angular.forEach(valueEditionRow.rowControlOption, function(valuerowControlOption, keyrowControlOption) {\r\n                    if (valuerowControlOption.optionItemId == choice.parent) {\r\n                        if (((choice.relation) ? choice.relation.trim() : \"\").toUpperCase() === \"E\") {\r\n                            bol = valuerowControlOption.optionValue;\r\n                        } else if (((choice.relation) ? choice.relation.trim() : \"\").toUpperCase() === \"O\") {\r\n                            bol = !valuerowControlOption.optionValue;\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return bol;\r\n    };\r\n\r\n    /* \r\n     *method:removeSpace\r\n     *param :htmltype \r\n     */\r\n    this.removeSpace = function(htmltype) {\r\n        return (htmltype) ? htmltype.replace(/ /g, \"\") : htmltype;\r\n    };\r\n\r\n    /* \r\n     *method:getLabel\r\n     *param :item \r\n     */\r\n    this.getLabel = function(item) {\r\n        return item.description;\r\n    };\r\n\r\n    /* \r\n     *method:$watch\r\n     *param :properties.value \r\n     */\r\n    $scope.$watch('properties.value', function(newValue, oldValue) {\r\n        if ($scope.properties.value.length !=0) {\r\n            angular.forEach($scope.properties.value, function(item) {\r\n                if (item.selected === true) {\r\n                    $scope.selectedEdition = item;\r\n                    $scope.initStatus = true;\r\n                }\r\n            });\r\n            if ($scope.initStatus) {\r\n                    $scope.initStatus = false;\r\n                    var mrktem;\r\n                    $scope.markStyle = {\r\n                      'padding-left': '0px',\r\n                      'border-bottom-left-radius':'5px',\r\n                      'border-bottom-right-radius':'5px',\r\n                      'border-top-left-radius':'5px',\r\n                      'border-top-right-radius':'5px',\r\n                      'font-size': $scope.properties.optionClassFontSize+'px',\r\n                      'background-color': $scope.properties.color\r\n                        };\r\n                        \r\n                    $scope.optionStyle = {\r\n                      'padding-left': '30px',\r\n                      'border-bottom':$scope.properties.separatorLineStype +' '+ $scope.properties.separatorColor +' '+ $scope.properties.separatorLineThick+'px',\r\n                      'background-color': 'white'\r\n                        };    \r\n                \r\n                angular.forEach($scope.properties.value, function(valueEdition, keyEdition) {\r\n                    angular.forEach(valueEdition.editionRow, function(valueEditionRow, keyEditionRow) {\r\n                        angular.forEach(valueEditionRow.rowControlOption, function(valuerowControlOption, keyrowControlOption) {\r\n                            valuerowControlOption.name = (valuerowControlOption.name) ? valuerowControlOption.name.trim() : valuerowControlOption.name;\r\n                            valuerowControlOption.description = (valuerowControlOption.description) ? valuerowControlOption.description.trim() : valuerowControlOption.description;\r\n                            valuerowControlOption.type = (valuerowControlOption.type) ? ctrl.removeSpace(valuerowControlOption.type) :null;\r\n                            \r\n                            if(valuerowControlOption.editedStatus && valuerowControlOption.oldValue != valuerowControlOption.optionValue){\r\n                                if(ctrl.removeSpace(valuerowControlOption.type) != \"label\" && ctrl.removeSpace(valuerowControlOption.type) != \"mark\"){\r\n                                 valuerowControlOption.preeditedStatus     = true;\r\n                                 $scope.properties.hasChangedEditionStatus = false;\r\n                                }\r\n                            }else{\r\n                                valuerowControlOption.editedStatus = false;\r\n                                valuerowControlOption.oldValue = valuerowControlOption.optionValue;\r\n                            }\r\n                            \r\n                            if (valuerowControlOption.type === \"checkbox\") {\r\n                                ctrl.getModel(valuerowControlOption);\r\n                            } else {\r\n                                valuerowControlOption.optionValue = valuerowControlOption.optionValue.trim();\r\n                            }\r\n                            valuerowControlOption.parent = (valuerowControlOption.parent) ? valuerowControlOption.parent.trim() : valuerowControlOption.parent;\r\n                            valuerowControlOption.relation = (valuerowControlOption.relation) ? valuerowControlOption.relation.trim() : valuerowControlOption.relation;\r\n                            $scope.marktoggleShow[valuerowControlOption.persistenceId] = true;\r\n                            if (valuerowControlOption.type === \"mark\") {\r\n                                $scope.marktoggleArray[valuerowControlOption.persistenceId] = true;\r\n                                mrktem = valuerowControlOption.optionClass;\r\n                            } else {\r\n                                if (mrktem === valuerowControlOption.optionClass) {\r\n                                    $scope.marktoggleShow[valuerowControlOption.persistenceId] = false;\r\n                                }\r\n                            }\r\n                           \r\n                        });\r\n                    });\r\n                });\r\n                $scope.copyValue = angular.copy($scope.properties.value);\r\n            }\r\n        }\r\n    });\r\n}","description":"","custom":true,"properties":[{"label":"Value","name":"value","type":"text","defaultValue":"This is the initial value","bond":"expression"},{"label":"Label","name":"label","type":"text","defaultValue":"EDITION CONTAINER","bond":"interpolation"},{"label":"Label hidden","name":"labelHidden","type":"boolean","defaultValue":false,"bond":"constant"},{"label":"Option class color","name":"color","type":"text","defaultValue":"#fcc9b9;","bond":"constant"},{"label":"Option class font size","name":"optionClassFontSize","type":"integer","defaultValue":14,"bond":"constant"},{"label":"Disabled","name":"disabled","type":"boolean","defaultValue":false,"bond":"expression"},{"label":"Edition Status Changed","name":"hasChangedEditionStatus","type":"text","bond":"variable"},{"label":"Before Edit Option Name Color","name":"beforeEditColor","help":"編集前のオプション名のテキストカラーを選択できます。","type":"text","defaultValue":"black","bond":"constant"},{"label":"After Edit Option Name Color","name":"afterEditColor","help":"編集後のオプション名のテキストカラーを選択できます。","type":"text","defaultValue":"red","bond":"constant"},{"label":"Separator Line Stype","name":"separatorLineStype","type":"choice","defaultValue":"dashed","choiceValues":["none","hidden","solid","double","groove","ridge","inset","outset","dashed","dotted"],"bond":"expression"},{"label":"Separator Color","name":"separatorColor","help":"Select separator color","type":"text","defaultValue":"black","bond":"constant"},{"label":"Separator Line Thick","name":"separatorLineThick","help":"Set separator line thick","type":"integer","defaultValue":1,"bond":"expression"}],"assets":[],"requiredModules":[],"type":"widget"}